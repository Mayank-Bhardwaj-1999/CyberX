events {
    worker_connections 1024;
}

http {
    upstream cybersecurity_backend {
        # Docker Swarm will automatically populate these
        server cybersecurity-api:8080 max_fails=3 fail_timeout=30s;
        # Docker Compose scaling will add more servers here automatically
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    
    # Connection limiting  
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    server {
        listen 80;
        server_name localhost;
        
        # Connection limits
        limit_conn conn_limit_per_ip 20;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # API endpoints with load balancing
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://cybersecurity_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check and retry logic
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_retry 3;
            proxy_timeout 60s;
            proxy_connect_timeout 10s;
            
            # Caching for GET requests
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 5m;
            proxy_cache_key "$scheme$request_method$host$request_uri";
        }

        # Health check endpoint
        location /health {
            proxy_pass http://cybersecurity_backend;
            access_log off;
        }

        # Docs and admin
        location /docs {
            proxy_pass http://cybersecurity_backend;
        }

        location /redoc {
            proxy_pass http://cybersecurity_backend;
        }

        # Metrics endpoint
        location /metrics {
            proxy_pass http://cybersecurity_backend;
            access_log off;
        }

        # Status page for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;  # Docker networks
            deny all;
        }
    }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Performance tuning
    keepalive_timeout 65;
    keepalive_requests 100;
    client_max_body_size 10M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;
}
