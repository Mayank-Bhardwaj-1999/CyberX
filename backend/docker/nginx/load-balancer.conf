upstream fastapi_backend {
    server cybersecurity-fastapi-1:8080 weight=1 max_fails=3 fail_timeout=30s;
    server cybersecurity-fastapi-2:8080 weight=1 max_fails=3 fail_timeout=30s;
    server cybersecurity-fastapi-3:8080 weight=1 max_fails=3 fail_timeout=30s;
}

server {
    listen 80;
    server_name localhost;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Load balancer stats (simple)
    location /load-balancer-status {
        access_log off;
        return 200 "Load Balancer Status: 3 FastAPI instances active\n";
        add_header Content-Type text/plain;
    }

    # Proxy all API requests to FastAPI backend
    location / {
        proxy_pass http://fastapi_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Add headers for debugging
        add_header X-Upstream-Server $upstream_addr always;
        add_header X-Load-Balancer "nginx-3-instances" always;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 200;
        }
    }
}
